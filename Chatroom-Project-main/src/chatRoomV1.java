import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author 
 *  Somret and Levi
 */
public class chatRoomV1 extends javax.swing.JFrame implements Runnable {
    Scanner keyboard = new Scanner(System.in);
    private Socket client;
    private BufferedReader inFromServer;
    private PrintWriter outToServer;
    private boolean done;
    private String username; 
    private boolean connected = false; 
    private ChatLogger CLIENT; 
    

    /**
     * Creates new form chatRoomV1
     */
    
    
    public chatRoomV1() {
        initComponents();
        
        
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jPopupMenu3 = new javax.swing.JPopupMenu();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        sendButton = new javax.swing.JButton();
        quitButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        userMessage = new javax.swing.JTextArea();
        connectButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        chatLog = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Message:");

        sendButton.setText("Send");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });
        sendButton.setEnabled(false); // Initial set to disabled because user message is empty.


        quitButton.setText("Quit");
        quitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitButtonActionPerformed(evt);
            }
        });

        userMessage.setColumns(20);
        userMessage.setRows(5);
        jScrollPane3.setViewportView(userMessage);
        // Disable the send button if the text area is empty. 
        userMessage.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                checkText(); 
            }
            @Override
            public void changedUpdate(DocumentEvent e) {
                checkText(); 
            }
            @Override
            public void removeUpdate(DocumentEvent e) {
                checkText(); 
            }
        });

 

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });

        chatLog.setEditable(false);
        chatLog.setColumns(20);
        chatLog.setRows(5);
        jScrollPane4.setViewportView(chatLog);

        jLabel1.setText("Chat:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(132, 132, 132)
                        .addComponent(jLabel1)
                        .addGap(162, 162, 162)
                        .addComponent(quitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 340, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(29, 29, 29)
                                .addComponent(sendButton, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane4))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(quitButton)
                    .addComponent(connectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Allows users to send messages to other people in the chat. Additionally, it handles logic where users
     * may not have connected to the server. 
     * @param evt
     *  When the button is clicked. 
     * @author
     *  Somret Say
     * @author
     *  Levi Kuhaulua
     */
    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed
        if (!connected) {
            connectButton.doClick(); // Connect user to server if they haven't done so yet. 
        } else {
            String message = userMessage.getText();
            outToServer.println(message);
            userMessage.setText(""); 
            CLIENT.logMessage(username + ": " + message); 
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    /**
     * Handles the logic when users click on the quit button. 
     * @param evt
     *  When the Quit button is pressed
     * @author
     *  Somret Say
     * @author
     *  Levi Kuhaulua
     */
    private void quitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitButtonActionPerformed
        
        // Deals with possibility where user did not connect to server. 
        if (!connected) { 
            System.exit(0); 
        } else {
            JOptionPane.showMessageDialog(this, "Quitting out of app");
        
            try{
                outToServer = new PrintWriter(client.getOutputStream(), true);
                outToServer.println("has left the chat!");
                shutdown();
            }catch(IOException e){
                CLIENT.messageException(e.getMessage()); 
            }

            System.exit(0); 
        }
        
        //shuts down program
    }//GEN-LAST:event_quitButtonActionPerformed

    /**
     * Handles the event where the user clicks on the connect button to connect to the server. 
     * @param evt
     *  When the connect button is clicked. 
     * @author 
     *  Somret Say
     * @author 
     *  Levi Kuhaulua
     */
    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        // TODO add your handling code here:
        //connects the client to the server
        
        try {
            username = JOptionPane.showInputDialog(this,"Enter Username:"); 
            while (!connected) {
                if (username == null) {
                    // Allows them to break out of the Connect Button
                    break; 
                } else if (username.isBlank()) {
                    // If username is empty. 
                    JOptionPane.showMessageDialog(this, "Invalid Username"); 
                    username = JOptionPane.showInputDialog(this, "Enter Username:"); 
                } else {
                    connectButton.setEnabled(false); // Prevent users from trying to reconnect and cause issues. 
                    client = new Socket("localhost", 12345); // Adjust host and port as needed
                    outToServer = new PrintWriter(client.getOutputStream(), true);
                    inFromServer = new BufferedReader(new InputStreamReader(client.getInputStream()));
                    outToServer.println(username); // Send the username to the server so they know who they're connecting with. 
                    Thread messageListener = new Thread(this); 
                    CLIENT = new ChatLogger(username);
                    messageListener.start();
                    connected = true; 
                }
            }
            
        } catch (IOException e) {
            CLIENT.SEVERE(e.getMessage()); 
            JOptionPane.showMessageDialog(this, "Server does not exist!");
        }
    }//GEN-LAST:event_connectButtonActionPerformed

    /**
     * Disables/Enables the send button depending on if the user message is blank. 
     * @author 
     *  Levi Kuhaulua
     */
    private void checkText() {
        if (!userMessage.getText().isBlank()) {
            sendButton.setEnabled(true); 
        } else {
            sendButton.setEnabled(false); 
        }
    }

   /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(chatRoomV1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(chatRoomV1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(chatRoomV1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(chatRoomV1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new chatRoomV1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea chatLog;
    private javax.swing.JButton connectButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JPopupMenu jPopupMenu3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JButton quitButton;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea userMessage;
    // End of variables declaration//GEN-END:variables

    public void run() {
        try {
            String message;
            while ((message = inFromServer.readLine()) != null) { 
                chatLog.append(message + "\n");
                // Log out messages sent from other users. 
                if (message.split(":")[0].equalsIgnoreCase(username)) {
                    continue; 
                } else {
                    CLIENT.logMessage(message); 
                }
            }
        } catch (IOException e) {
            CLIENT.messageException(e.getMessage());
        }

    }
    private void shutdown() {
        done = true;
        try {
            if (outToServer != null) {
                outToServer.close();
            }
            if (inFromServer != null) {
                inFromServer.close();
            }
            if (client != null) {
                client.close();
            }
        } catch (IOException e) {
            CLIENT.messageException(e.getMessage()); 
        }
    }
}
